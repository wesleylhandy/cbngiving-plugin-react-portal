{"version":3,"file":"css-vars-ponyfill.esm.min.js","sources":["../node_modules/get-css-data/dist/get-css-data.esm.js","../src/merge-deep.js","../node_modules/balanced-match/index.js","../src/parse-css.js","../src/stringify-css.js","../src/walk-css.js","../src/transform-css.js","../src/index.js"],"sourcesContent":["/*!\n * get-css-data\n * v1.4.0\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map(function(x) {\n        return null;\n    });\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    urlArray.forEach(function(url, i) {\n        var parser = document.createElement(\"a\");\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isCrossDomain = parser.host !== location.host;\n        var isSameProtocol = parser.protocol === location.protocol;\n        if (isCrossDomain && typeof XDomainRequest !== \"undefined\") {\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest();\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    onSuccess(xdr.responseText, i);\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout(function() {\n                    xdr.send();\n                }, 0);\n            } else {\n                console.log(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol\");\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    if (xhr.status === 200) {\n                        onSuccess(xhr.responseText, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {object}   [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement: document,\n *     include    : 'style,link[rel=\"stylesheet\"]',\n *     exclude    : '[href=\"skip.css\"]',\n *     filter     : /red/,\n *     useCSSOM   : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(function(node) {\n        return !matchesSelector(node, settings.exclude);\n    });\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function(x) {\n        return null;\n    });\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach(function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                });\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        });\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        });\n        importData.urls = importData.rules.map(function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        });\n        importData.absoluteUrls = importData.urls.map(function(url) {\n            return getFullUrl(url, baseUrl);\n        });\n        importData.absoluteRules = importData.rules.map(function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        });\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach(function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    });\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach(function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    });\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach(function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName === \"LINK\" && linkHref && linkRel && linkRel.toLowerCase() === \"stylesheet\";\n            var isStyle = node.nodeName === \"STYLE\";\n            if (isLink) {\n                getUrls(linkHref, {\n                    mimeType: \"text/css\",\n                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                        settings.onBeforeSend(xhr, node, url);\n                    },\n                    onSuccess: function onSuccess(cssText, url, urlIndex) {\n                        var sourceUrl = getFullUrl(linkHref, location.href);\n                        handleSuccess(cssText, i, node, sourceUrl);\n                    },\n                    onError: function onError(xhr, url, urlIndex) {\n                        cssArray[i] = \"\";\n                        settings.onError(xhr, node, url);\n                        handleComplete();\n                    }\n                });\n            } else if (isStyle) {\n                var cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    cssText = Array.apply(null, node.sheet.cssRules).map(function(rule) {\n                        return rule.cssText;\n                    }).join(\"\");\n                }\n                handleSuccess(cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        });\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url) {\n    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport default getCssData;\n//# sourceMappingURL=get-css-data.esm.js.map\n","// Functions\n// =============================================================================\n/**\n * Performs a deep merge of objects and returns new object. Does not modify\n * objects (immutable) and merges arrays via concatenation.\n *\n * @param {...object} objects - Objects to merge\n * @returns {object} New object with merged key/values\n */\nfunction mergeDeep(...objects) {\n    const isObject = obj => obj instanceof Object && obj.constructor === Object;\n\n    return objects.reduce((prev, obj) => {\n        Object.keys(obj).forEach(key => {\n            const pVal = prev[key];\n            const oVal = obj[key];\n\n            // if (Array.isArray(pVal) && Array.isArray(oVal)) {\n            //     prev[key] = pVal.concat(...oVal);\n            // }\n            if (isObject(pVal) && isObject(oVal)) {\n                prev[key] = mergeDeep(pVal, oVal);\n            }\n            else {\n                prev[key] = oVal;\n            }\n        });\n\n        return prev;\n    }, {});\n}\n\n\n// Export\n// =============================================================================\nexport default mergeDeep;\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string} css The CSS stringt to be converted to an AST\n * @returns {object}\n */\nfunction cssParse(css) {\n    const errors = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') { return; }\n\n        let i = 2;\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) { i++; }\n\n        // FIXED\n        if (!css[i]) { return error('end of comment is missing'); }\n\n        const str = css.slice(2, i);\n        css = css.slice(i + 2);\n\n        return { type: 'comment', comment: str };\n    }\n    function comments() {\n        const cmnts = [];\n\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n        return cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m)\n        { return m[0]\n            .trim() // remove all comments from selectors\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                return m.replace(/,/g, '\\u200C');\n            })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map(function(s) {\n                return s.replace(/\\u200C/g, ',');\n            }); }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\n        let prop = match(/^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!prop) { return; }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) { return error('property missing \\':\\''); }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n\n        const ret = { type: 'declaration', property: prop.replace(comment_regexp, ''), value: val ? val[0].replace(comment_regexp, '').trim() : '' };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n    function declarations() {\n        if (!open()) { return error('missing \\'{\\''); }\n\n        let d,\n            decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) { return error('missing \\'}\\''); }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) { return { type: 'keyframe', values: vals, declarations: declarations() }; }\n    }\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) { return; }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) { return error('@keyframes missing name'); } // identifier\n\n        const name = m[1];\n\n        if (!open()) { return error('@keyframes missing \\'{\\''); }\n\n        let frame,\n            frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) { return error('@keyframes missing \\'}\\''); }\n\n        return { type: 'keyframes', name: name, vendor: vendor, keyframes: frames };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media *([^{]+)/);\n        if (m) { return { type: 'media', media: m[1].trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        // FIXED\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n        if (css[0] === '@') { return at_keyframes() || at_supports() || at_host() || at_media() || at_custom_m() || at_page() || at_document() || at_fontface() || at_x(); }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        const sel = selector() || [];\n        if (!sel.length) { error('selector missing'); }\n\n        const decls = declarations();\n\n        return { type: 'rule', selectors: sel, declarations: decls };\n    }\n    function rules(core) {\n        if (!core && !open()) { return error('missing \\'{\\''); }\n\n        let node,\n            rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            rules.push(node);\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) { return error('missing \\'}\\''); }\n\n        return rules;\n    }\n\n    return { type: 'stylesheet', stylesheet: { rules: rules(true), errors: errors } };\n}\n\n\n// Exports\n// =============================================================================\nexport default cssParse;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport mergeDeep    from './merge-deep';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER  = '--';\nconst VAR_FUNC_IDENTIFIER  = 'var';\nconst variablePersistStore = {};\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssText CSS containing variable definitions and functions\n * @param {object}   [options] Options object\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyVars=true] Remove declarations that do not\n *                   contain a CSS variable from the return value. Note that\n *                   @font-face and @keyframe rules require all declarations to\n *                   be returned if a CSS variable is used.\n * @param {boolean}  [options.persist=false] Persists options.variables,\n *                   allowing variables set in previous calls to be applied in\n *                   subsequent calls.\n * @param {boolean}  [options.preserve=false] Preserve CSS variable definitions\n *                   and functions in the return value, allowing \"live\" variable\n *                   updates via JavaScript to continue working in browsers with\n *                   native CSS variable support.\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformVars(cssText, options = {}) {\n    const defaults = {\n        fixNestedCalc: true,\n        onlyVars     : true,\n        persist      : false,\n        preserve     : false,\n        variables    : {},\n        onWarning() {}\n    };\n    const settings = mergeDeep(defaults, options);\n    const map      = settings.persist ? variablePersistStore : JSON.parse(JSON.stringify(variablePersistStore));\n\n    // Convert cssText to AST (this could throw errors)\n    const cssTree = parseCss(cssText);\n\n    // Remove non-vars\n    if (settings.onlyVars) {\n        cssTree.stylesheet.rules = filterVars(cssTree.stylesheet.rules);\n    }\n\n    // Define variables\n    cssTree.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule') {\n            return;\n        }\n\n        // only variables declared for `:root` are supported\n        if (rule.selectors.length !== 1 || rule.selectors[0] !== ':root') {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                map[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n\n        // optionally remove `--*` properties from the rule\n        if (!settings.preserve) {\n            for (let i = varNameIndices.length - 1; i >= 0; i--) {\n                rule.declarations.splice(varNameIndices[i], 1);\n            }\n        }\n    });\n\n    // Handle variables defined in settings.variables\n    if (Object.keys(settings.variables).length) {\n        const newRule = {\n            declarations: [],\n            selectors   : [':root'],\n            type        : 'rule'\n        };\n\n        Object.keys(settings.variables).forEach(key => {\n            // Convert all property names to leading '--' style\n            const prop  = `--${key.replace(/^-+/, '')}`;\n            const value = settings.variables[key];\n\n            // Update map value with settings.variables value\n            if (map[prop] !== value) {\n                map[prop] = value;\n\n                // Add new declaration to newRule\n                newRule.declarations.push({\n                    type    : 'declaration',\n                    property: prop,\n                    value   : value\n                });\n            }\n        });\n\n        // Append new :root ruleset\n        if (settings.preserve && newRule.declarations.length) {\n            cssTree.stylesheet.rules.push(newRule);\n        }\n    }\n\n    // Resolve variables\n    walkCss(cssTree.stylesheet, function(declarations, node) {\n        let decl;\n        let resolvedValue;\n        let value;\n\n        for (let i = 0; i < declarations.length; i++) {\n            decl = declarations[i];\n            value = decl.value;\n\n            // skip comments\n            if (decl.type !== 'declaration') {\n                continue;\n            }\n\n            // skip values that don't contain variable functions\n            if (!value || value.indexOf(VAR_FUNC_IDENTIFIER + '(') === -1) {\n                continue;\n            }\n\n            resolvedValue = resolveValue(value, map, settings);\n\n            if (resolvedValue !== decl.value) {\n                if (!settings.preserve) {\n                    decl.value = resolvedValue;\n                }\n                else {\n                    declarations.splice(i, 0, {\n                        type    : decl.type,\n                        property: decl.property,\n                        value   : resolvedValue\n                    });\n\n                    // skip ahead of preserved declaration\n                    i++;\n                }\n            }\n        }\n    });\n\n    // Fix nested calc() values\n    if (settings.fixNestedCalc) {\n        fixNestedCalc(cssTree.stylesheet.rules);\n    }\n\n    // Return CSS string\n    return stringifyCss(cssTree);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Filters rules recursively, retaining only declarations that contain either a\n * CSS variable definition (property) or function (value). Maintains all\n * declarations for @font-face and @keyframes rules that contain a CSS\n * definition or function.\n *\n * @param {array} rules\n * @returns {array}\n */\nfunction filterVars(rules) {\n    return rules.filter(rule => {\n        // Rule, @font-face, @host, @page\n        if (rule.declarations) {\n            const declArray = rule.declarations.filter(d => {\n                const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                const hasVarVal  = d.value && d.value.indexOf(VAR_FUNC_IDENTIFIER + '(') > -1;\n\n                return hasVarProp || hasVarVal;\n            });\n\n            // For most rule types the filtered declarations should be applied.\n            // @font-face declaratons are unique and require all declarations to\n            // be retained if any declaration contains a CSS variable definition\n            // or value.\n            if (rule.type !== 'font-face') {\n                rule.declarations = declArray;\n            }\n\n            return Boolean(declArray.length);\n        }\n        // @keyframes\n        else if (rule.keyframes) {\n            // @keyframe rules require all declarations to be retained if any\n            // declaration contains a CSS variable definition or value.\n            return Boolean(rule.keyframes.filter(k =>\n                Boolean(k.declarations.filter(d => {\n                    const hasVarProp = d.property && d.property.indexOf(VAR_PROP_IDENTIFIER) === 0;\n                    const hasVarVal  = d.value && d.value.indexOf(VAR_FUNC_IDENTIFIER + '(') > -1;\n\n                    return hasVarProp || hasVarVal;\n                }).length)\n            ).length);\n        }\n        // @document, @media, @supports\n        else if (rule.rules) {\n            rule.rules = filterVars(rule.rules).filter(r => r.declarations && r.declarations.length);\n\n            return Boolean(rule.rules.length);\n        }\n\n        return true;\n    });\n}\n\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {array} rules\n */\nfunction fixNestedCalc(rules) {\n    const reCalcExp = /(-[a-z]+-)?calc\\(/; // Match \"calc(\" or \"-vendor-calc(\"\n\n    rules.forEach(rule => {\n        if (rule.declarations) {\n            rule.declarations.forEach(decl => {\n                let oldValue = decl.value;\n                let newValue = '';\n\n                while (reCalcExp.test(oldValue)) {\n                    const rootCalc = balanced('calc(', ')', oldValue || '');\n\n                    oldValue = oldValue.slice(rootCalc.end);\n\n                    while (reCalcExp.test(rootCalc.body)) {\n                        const nestedCalc = balanced(reCalcExp, ')', rootCalc.body);\n\n                        rootCalc.body = `${nestedCalc.pre}(${nestedCalc.body})${nestedCalc.post}`;\n                    }\n\n                    newValue += `${rootCalc.pre}calc(${rootCalc.body}`;\n                    newValue += !reCalcExp.test(oldValue) ? `)${rootCalc.post}` : '';\n                }\n\n                decl.value = newValue || decl.value;\n            });\n        }\n    });\n}\n\n/**\n * Resolves CSS var() function(s) with `map` data or fallback value(s). Returns\n * original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} map CSS custom property key/values\n * @param {object} settings Settings object passed from transformVars()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a map or fallback value. Allows restoring\n *                 original var() function from recursive resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to map or fallback\n *                  value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, map, settings = {}, __recursiveFallback) {\n    const varFuncData  = balanced('var(', ')', value);\n    const warningIntro = 'CSS transform warning:';\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => map['--x'] or map['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when map['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0];\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = map.hasOwnProperty(name) ? String(map[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`${warningIntro} variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, map, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    if (!varFuncData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`${warningIntro} missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    else if (varFuncData.body.trim().length === 0) {\n        settings.onWarning(`${warningIntro} var() must contain a non-whitespace string`);\n\n        return value;\n    }\n    else {\n        return (\n            varFuncData.pre\n            + resolveFunc(varFuncData.body)\n            + resolveValue(varFuncData.post, map, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformVars;\nexport { variablePersistStore };","// Dependencies\n// =============================================================================\nimport getCssData               from 'get-css-data';\nimport mergeDeep                from './merge-deep';\nimport transformCss             from './transform-css';\nimport { variablePersistStore } from './transform-css';\nimport { name as pkgName }      from '../package.json';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst defaults = {\n    // Sources\n    rootElement  : isBrowser ? document : null,\n    include      : 'style,link[rel=stylesheet]',\n    exclude      : '',\n    // Options\n    fixNestedCalc: true,  // transformCss\n    onlyLegacy   : true,  // cssVars\n    onlyVars     : false, // cssVars, transformCss\n    preserve     : false, // transformCss\n    shadowDOM    : false, // cssVars\n    silent       : false, // cssVars\n    updateDOM    : true,  // cssVars\n    updateURLs   : true,  // cssVars\n    variables    : {},    // transformCss\n    watch        : false, // cssVars\n    // Callbacks\n    onBeforeSend() {},    // cssVars\n    onSuccess() {},       // cssVars\n    onWarning() {},       // transformCss\n    onError() {},         // cssVars\n    onComplete() {}       // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes (@keyframes & @-VENDOR-keyframes)\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS root vars\n    cssRootRules: /(?::root\\s*{\\s*[^}]*})/g,\n    // CSS url(...) values\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS variable :root declarations and var() function values\n    cssVars: /(?:(?::root\\s*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\n\n// Mutation observer referece created via options.watch\nlet cssVarsObserver  = null;\n\n// Indicates if document-level custom property values have been parsed, stored,\n// and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {boolean}  [options.fixNestedCalc=true] Removes nested 'calc' keywords\n *                   for legacy browser compatibility.\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.onlyVars=false] Determines if CSS rulesets and\n *                   declarations without a custom property value should be\n *                   removed from the ponyfill-generated CSS\n * @param {boolean}  [options.preserve=false] Determines if the original CSS\n *                   custom property declaration will be retained in the\n *                   ponyfill-generated CSS.\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will\n *                   convert relative url() paths to absolute urls.\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values.\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) a reference to\n *                   the appended <style> node, and 3) an object containing all\n *                   custom properies names and values.\n *\n * @example\n *\n *   cssVars({\n *     rootElement  : document,\n *     include      : 'style,link[rel=\"stylesheet\"]',\n *     exclude      : '',\n *     fixNestedCalc: true,\n *     onlyLegacy   : true,\n *     onlyVars     : false,\n *     preserve     : false,\n *     shadowDOM    : false,\n *     silent       : false,\n *     updateDOM    : true,\n *     updateURLs   : true,\n *     variables    : {\n *       // ...\n *     },\n *     watch        : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     },\n *     onWarning(message) {\n *       // ...\n *     },\n *     onError(message, node) {\n *       // ...\n *     },\n *     onComplete(cssText, styleNode) {\n *       // ...\n *     }\n *   });\n */\nfunction cssVars(options = {}) {\n    const settings    = mergeDeep(defaults, options);\n    const styleNodeId = pkgName;\n\n    // Always exclude styleNodeId element, which is the generated <style> node\n    // containing previously transformed CSS.\n    settings.exclude = `#${styleNodeId}` + (settings.exclude ? `,${settings.exclude}` : '');\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.error(`${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent) {\n            // eslint-disable-next-line\n            console.warn(message);\n        }\n\n        settings.onWarning(message);\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        const isShadowElm = (settings.shadowDOM && settings.rootElement.shadowRoot) || settings.rootElement.host;\n\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    // Convert all property names to leading '--' style\n                    const prop  = `--${key.replace(/^-+/, '')}`;\n                    const value = settings.variables[key];\n\n                    document.documentElement.style.setProperty(prop, value);\n                });\n            }\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (isShadowElm && !isShadowDOMReady) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement: defaults.rootElement,\n                include: defaults.include,\n                exclude: settings.exclude,\n                onSuccess(cssText, node, url) {\n                    const cssRootDecls = (cssText.match(regex.cssRootRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssRootDecls || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Transform CSS, which stores custom property values from\n                    // cssText in variablePersistStore. This step ensures that\n                    // variablePersistStore contains all document-level custom\n                    // property values for subsequent ponyfill calls.\n                    transformCss(cssText, {\n                        persist: true\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variablePersistStore\n                    // will be used to transform values in shadow host/root\n                    // elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            if (settings.watch) {\n                addMutationObserver(settings, styleNodeId);\n            }\n\n            getCssData({\n                rootElement: settings.rootElement,\n                include: settings.include,\n                exclude: settings.exclude,\n                // This filter does a test on each block of CSS. An additional\n                // filter is used in the parser to remove individual\n                // declarations.\n                filter: settings.onlyVars ? regex.cssVars : null,\n                onBeforeSend: settings.onBeforeSend,\n                onSuccess(cssText, node, url) {\n                    const returnVal = settings.onSuccess(cssText, node, url);\n\n                    cssText = returnVal === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs) {\n                        const cssUrls = cssText\n                            // Remove comments to avoid processing @import in comments\n                            .replace(regex.cssComments, '')\n                            // Match url(...) values\n                            .match(regex.cssUrls) || [];\n\n                        cssUrls.forEach(cssUrl => {\n                            const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n                            const newUrl = getFullUrl(oldUrl, url);\n\n                            cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n                        });\n                    }\n\n                    return cssText;\n                },\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    const cssMarker = /\\/\\*__CSSVARSPONYFILL-(\\d+)__\\*\\//g;\n                    let   styleNode = null;\n\n                    // Concatenate cssArray items, replacing those that do not\n                    // contain a CSS custom property declaraion or function with\n                    // a temporary marker . After the CSS is transformed, the\n                    // markers will be replaced with the matching cssArray item.\n                    // This optimization is done to avoid processing CSS that\n                    // will not change as a results of the ponyfill.\n                    cssText = cssArray.map((css, i) => regex.cssVars.test(css) ? css : `/*__CSSVARSPONYFILL-${i}__*/`).join('');\n\n                    try {\n                        cssText = transformCss(cssText, {\n                            fixNestedCalc: settings.fixNestedCalc,\n                            onlyVars     : settings.onlyVars,\n                            persist      : settings.updateDOM,\n                            preserve     : settings.preserve,\n                            variables    : settings.variables,\n                            onWarning    : handleWarning\n                        });\n\n                        const hasKeyframes = regex.cssKeyframes.test(cssText);\n\n                        // Replace markers with appropriate cssArray item\n                        cssText = cssText.replace(cssMarker, (match, group1) => cssArray[group1]);\n\n                        if (settings.updateDOM && nodeArray && nodeArray.length) {\n                            const lastNode = nodeArray[nodeArray.length - 1];\n\n                            styleNode = settings.rootElement.querySelector(`#${styleNodeId}`) || document.createElement('style');\n                            styleNode.setAttribute('id', styleNodeId);\n\n                            if (styleNode.textContent !== cssText) {\n                                styleNode.textContent = cssText;\n                            }\n\n                            // Insert <style> element after last nodeArray item\n                            if (lastNode.nextSibling !== styleNode && lastNode.parentNode) {\n                                lastNode.parentNode.insertBefore(styleNode, lastNode.nextSibling);\n                            }\n\n                            if (hasKeyframes) {\n                                fixKeyframes(settings.rootElement);\n                            }\n                        }\n                    }\n                    catch(err) {\n                        let errorThrown = false;\n\n                        // Iterate cssArray to detect CSS text and node(s)\n                        // responsibile for error.\n                        cssArray.forEach((cssText, i) => {\n                            try {\n                                cssText = transformCss(cssText, settings);\n                            }\n                            catch(err) {\n                                const errorNode = nodeArray[i - 0];\n\n                                errorThrown = true;\n                                handleError(err.message, errorNode);\n                            }\n                        });\n\n                        // In the event the error thrown was not due to\n                        // transformCss, handle the original error.\n                        /* istanbul ignore next */\n                        if (!errorThrown) {\n                            handleError(err.message || err);\n                        }\n                    }\n\n                    // Process shadow DOM\n                    if (settings.shadowDOM) {\n                        const elms = [\n                            settings.rootElement,\n                            ...settings.rootElement.querySelectorAll('*')\n                        ];\n\n                        // Iterates over all elements in rootElement and calls\n                        // cssVars on each shadowRoot, passing document-level\n                        // custom properties as options.variables.\n                        for (let i = 0, elm; (elm = elms[i]); ++i) {\n                            if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                const shadowSettings = mergeDeep(settings, {\n                                    rootElement: elm.shadowRoot,\n                                    variables  : variablePersistStore\n                                });\n\n                                cssVars(shadowSettings);\n                            }\n                        }\n                    }\n\n                    settings.onComplete(cssText, styleNode, variablePersistStore);\n                }\n            });\n        }\n\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n * @param {string} ignoreId\n */\nfunction addMutationObserver(settings, ignoreId) {\n    if (window.MutationObserver && !cssVarsObserver) {\n        const isLink  = node => node.tagName === 'LINK' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n        const isStyle = node => node.tagName === 'STYLE' && (ignoreId ? node.id !== ignoreId : true);\n\n        let debounceTimer = null;\n\n        cssVarsObserver = new MutationObserver(function(mutations) {\n            let isUpdateMutation = false;\n\n            mutations.forEach(mutation => {\n                if (mutation.type === 'attributes') {\n                    isUpdateMutation = isLink(mutation.target) || isStyle(mutation.target);\n                }\n                else if (mutation.type === 'childList') {\n                    const addedNodes   = Array.apply(null, mutation.addedNodes);\n                    const removedNodes = Array.apply(null, mutation.removedNodes);\n\n                    isUpdateMutation = [].concat(addedNodes, removedNodes).some(node => {\n                        const isValidLink  = isLink(node) && !node.disabled;\n                        const isValidStyle = isStyle(node) && !node.disabled && regex.cssVars.test(node.textContent);\n\n                        return (isValidLink || isValidStyle);\n                    });\n                }\n\n                if (isUpdateMutation) {\n                    clearTimeout(debounceTimer);\n\n                    debounceTimer = setTimeout(function() {\n                        cssVars(settings);\n                    }, 1);\n                }\n            });\n        });\n\n        cssVarsObserver.observe(document.documentElement, {\n            attributes     : true,\n            attributeFilter: ['disabled', 'href'],\n            childList      : true,\n            subtree        : true\n        });\n    }\n}\n\n/**\n * Fixes issue keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = rootElement.getElementsByTagName('*');\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param {any} url\n * @param {any} [base=location.href]\n * @returns\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"],"names":["getUrls","urls","options","arguments","length","undefined","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","map","x","xhr","urlIndex","responseText","returnVal","indexOf","forEach","url","i","parser","document","createElement","setAttribute","href","String","isCrossDomain","host","location","isSameProtocol","protocol","XDomainRequest","xdr","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","log","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","getCssData","regex","cssComments","cssImports","rootElement","include","exclude","filter","useCSSOM","sourceNodes","querySelectorAll","node","matchesSelector","cssArray","handleComplete","cssText","join","handleSuccess","cssIndex","sourceUrl","resolveImports","baseUrl","callbackFn","__errorData","__errorRules","importData","parseImportData","rules","absoluteUrls","responseImportData","rule","replace","absoluteRules","push","responseArray","importText","resolvedCssText","errorData","data","test","ignoreRules","match","getFullUrl","oldUrl","newUrl","linkHref","getAttribute","linkRel","isLink","nodeName","toLowerCase","isStyle","textContent","sheet","cssRules","base","d","implementation","createHTMLDocument","b","a","head","appendChild","body","elm","selector","matches","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","call","mergeDeep","isObject","obj","Object","constructor","objects","reduce","prev","keys","pVal","key","oVal","balanced","str","RegExp","maybeMatch","r","range","start","end","pre","slice","post","reg","m","begs","beg","left","right","result","ai","bi","pop","cssParse","css","error","msg","Error","re","exec","whitespace","close","comment","type","comments","cmnts","c","trim","split","s","declaration","comment_regexp","prop","val","ret","property","value","declarations","decls","concat","keyframe","vals","values","at_rule","vendor","name","frame","frames","keyframes","at_keyframes","supports","at_supports","at_host","media","at_media","at_custom_m","selectors","at_page","at_document","at_fontface","at_x","core","sel","stylesheet","errors","stringifyCss","tree","delim","cb","renderMethods","visit","nodes","buf","n","txt","walkCss","fn","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","variablePersistStore","transformVars","persist","JSON","parse","stringify","cssTree","parseCss","onlyVars","filterVars","varNameIndices","decl","preserve","splice","variables","newRule","resolvedValue","resolveValue","fixNestedCalc","declArray","hasVarProp","hasVarVal","Boolean","k","reCalcExp","oldValue","newValue","rootCalc","nestedCalc","__recursiveFallback","varFuncData","warningIntro","onWarning","fallback","hasOwnProperty","replacement","unresolvedFallback","resolveFunc","isBrowser","window","isNativeSupport","CSS","defaults","cssVarsObserver","isShadowDOMReady","cssVars","styleNodeId","pkgName","handleError","message","sourceNode","silent","handleWarning","warn","isShadowElm","shadowDOM","shadowRoot","onlyLegacy","updateDOM","documentElement","style","setProperty","cssRootRules","nodeArray","watch","updateURLs","cssUrls","cssUrl","responseUrl","responseURL","statusText","styleNode","transformCss","hasKeyframes","cssKeyframes","group1","lastNode","querySelector","nextSibling","parentNode","insertBefore","errorThrown","errorNode","elms","addEventListener","init","evt","removeEventListener","addMutationObserver","ignoreId","MutationObserver","tagName","id","debounceTimer","mutations","isUpdateMutation","mutation","target","addedNodes","removedNodes","some","isValidLink","disabled","isValidStyle","observe","fixKeyframes","animationNameProp","getComputedStyle","allNodes","getElementsByTagName","keyframeNodes","len","offsetHeight","nodeStyle"],"mappings":"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"}